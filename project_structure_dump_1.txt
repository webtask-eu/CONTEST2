# Структура кода проекта (часть 1)
## Файл: PLUGIN/contests/admin/class-accounts-list-table.php

### Описание файла:
* * Конструктор класса
* * Переопределяем метод вывода таблицы, чтобы убрать нижние заголовки столбцов
* * Переопределяем стандартный метод search_box, чтобы он ничего не выводил
* * Отображение дополнительных элементов в навигации таблицы
* * Получение данных из базы
* * Определение количества записей
* * Текст, отображаемый когда нет данных
* * Определение колонок таблицы
* * Колонки, которые можно сортироватьP
* * Отображение значений в колонках
* * Отображение значений в колонках
* * Отображение чекбокса для выбора строки
* * Подготовка элементов перед отображением
* * Определение доступных групповых действий
* * Обработка групповых действий
* * Вспомогательный метод для удаления счета и связанных с ним данных

### Класс: `class Contest_Accounts_List_Table extends WP_List_Table {`
```php
class Contest_Accounts_List_Table extends WP_List_Table {
```

#### Метод: `public function __construct() {` (public function __construct() {)

#### Метод: `public function display() {` (public function display() {)

#### Метод: `public function search_box($text, $input_id) {` (public function search_box($text, $input_id) {)

#### Метод: `public function extra_tablenav($which) {` (public function extra_tablenav($which) {)

#### Метод: `public function get_accounts($per_page = 20, $page_number = 1, $search = '', $contest_id = 0) {` (public function get_accounts($per_page = 20, $page_number = 1, $search = '', $contest_id = 0) {)

#### Метод: `public function record_count($search = '', $contest_id = 0) {` (public function record_count($search = '', $contest_id = 0) {)

#### Метод: `public function no_items() {` (public function no_items() {)

#### Метод: `public function get_columns() {` (public function get_columns() {)

#### Метод: `public function get_sortable_columns() {` (public function get_sortable_columns() {)

#### Метод: `public function column_cb($item) {` (public function column_cb($item) {)

#### Метод: `public function prepare_items() {` (public function prepare_items() {)

#### Метод: `public function get_bulk_actions() {` (public function get_bulk_actions() {)

#### Метод: `public function process_bulk_action() {` (public function process_bulk_action() {)

#### Метод: `public function delete_account($account_id) {` (public function delete_account($account_id) {)

### add_action: `admin_notices`
```php
add_action('admin_notices', function() use ($account_ids) {
```

---

## Файл: PLUGIN/contests/admin/class-admin-menu.php

### Функция: `function fttradingapi_add_accounts_submenu() {`

### add_action: `admin_menu', 'fttradingapi_add_accounts_submenu`
```php
add_action('admin_menu', 'fttradingapi_add_accounts_submenu');
```

---

## Файл: PLUGIN/contests/admin/class-admin-pages.php

### Описание файла:
* * Форматирует время последнего обновления в удобочитаемый вид

### Функция: `function format_time_ago($last_update) {`

### Функция: `function fttradingapi_accounts_page_callback()`

### Функция: `function fttradingapi_edit_account_page_callback() {`

### Функция: `function fttradingapi_view_account_page_callback() {`

---

## Файл: PLUGIN/contests/admin/class-settings-page.php

### Описание файла:
* * Класс для страницы настроек плагина
* * Инициализация класса
* * Добавление страницы настроек в меню админки
* * Регистрация настроек в WordPress
* * Отображает информацию о статусе автоматического обновления
* * Добавление поля для настройки порога изменения
* * Отображение описания секции
* * Отображение поля настройки порога
* * Проверка и очистка введенных значений
* * Отображает страницу настроек
* * Отображает вкладку с логами
* * Получает последние N строк из файла
* * Обрабатывает действия на странице настроек

### Класс: `class FTTrader_Settings_Page {`
```php
class FTTrader_Settings_Page {
```

#### Метод: `public function __construct() {` (public function __construct() {)

#### Метод: `public function add_settings_page() {` (public function add_settings_page() {)

#### Метод: `public function register_settings() {` (public function register_settings() {)

#### Метод: `public function render_auto_update_section_description() {` (public function render_auto_update_section_description() {)

#### Метод: `public function render_number_field($args) {` (public function render_number_field($args) {)

#### Метод: `public function render_checkbox_field($args) {` (public function render_checkbox_field($args) {)

#### Метод: `public function sanitize_auto_update_settings($input) {` (public function sanitize_auto_update_settings($input) {)

#### Метод: `public function render_auto_update_status() {` (public function render_auto_update_status() {)

#### Метод: `public function register_graph_settings() {` (public function register_graph_settings() {)

#### Метод: `public function render_graph_checkbox_field($args) {` (public function render_graph_checkbox_field($args) {)

#### Метод: `public function render_graph_section_description() {` (public function render_graph_section_description() {)

#### Метод: `public function render_graph_field($args) {` (public function render_graph_field($args) {)

#### Метод: `public function render_graph_select_field($args) {` (public function render_graph_select_field($args) {)

#### Метод: `public function render_graph_color_field($args) {` (public function render_graph_color_field($args) {)

#### Метод: `public function sanitize_graph_settings($input) {` (public function sanitize_graph_settings($input) {)

#### Метод: `private function get_default_color($field) {` (private function get_default_color($field) {)

#### Метод: `private function add_threshold_field($field_key, $field_label, $default_value) {` (private function add_threshold_field($field_key, $field_label, $default_value) {)

#### Метод: `public function render_section_description() {` (public function render_section_description() {)

#### Метод: `public function render_threshold_field($args) {` (public function render_threshold_field($args) {)

#### Метод: `public function sanitize_thresholds($input) {` (public function sanitize_thresholds($input) {)

#### Метод: `private function get_last_lines($file, $lines) {` (private function get_last_lines($file, $lines) {)

#### Метод: `public function handle_actions() {` (public function handle_actions() {)

### add_action: `admin_menu', [$this, 'add_settings_page`
```php
add_action('admin_menu', [$this, 'add_settings_page']);
```

### add_action: `admin_init', [$this, 'register_settings`
```php
add_action('admin_init', [$this, 'register_settings']);
```

### add_action: `admin_init', [$this, 'handle_actions`
```php
add_action('admin_init', [$this, 'handle_actions']);
```

---

## Файл: PLUGIN/contests/admin/css/admin.css

### Селектор: `.contest-prizes-container`

### Селектор: `.prizes-table-container`

### Селектор: `.prizes-table`

### Селектор: `.prizes-table th`

### Селектор: `.prizes-table td`

### Селектор: `.prize-place-column`

### Селектор: `.prize-amount-column`

### Селектор: `.prize-actions-column`

### Селектор: `.prize-place`

### Селектор: `.prize-amount-input`

### Селектор: `.prize-description-input`

### Селектор: `.remove-prize-button`

### Селектор: `.remove-prize-button:hover`

### Селектор: `.remove-prize-button .dashicons`

### Селектор: `.prizes-actions`

### Селектор: `.add-prize-button`

### Селектор: `.add-prize-button .dashicons`

### Селектор: `.prize-row:nth-child(1) .prize-place`

### Селектор: `.prize-row:nth-child(2) .prize-place`

### Селектор: `.prize-row:nth-child(3) .prize-place`

### Селектор: `#clear_history`

### Селектор: `#clear_history:hover`

### Селектор: `.logs-container`

### Селектор: `.logs-container h3`

### Селектор: `.log-entries`

### Селектор: `.log-entries pre`

### Селектор: `.update-progress`

### Селектор: `.progress-bar-container`

### Селектор: `.progress-bar`

### Селектор: `.auto-update-status`

### Селектор: `.auto-update-status h3`

### Селектор: `.auto-update-status table`

### Селектор: `.auto-update-status th`

### Селектор: `.auto-update-status td`

### Селектор: `.auto-update-status .status-enabled`

### Селектор: `.auto-update-status .status-disabled`

### Селектор: `.auto-update-status .status-running`

### Селектор: `.auto-update-status .button`

### Селектор: `.auto-update-status .status-running:after`

### Селектор: `.debug-info-container`

### Селектор: `.debug-info-container h3`

### Селектор: `.debug-info-content`

### Селектор: `.debug-section`

### Селектор: `.debug-section h4`

### Селектор: `.debug-point`

### Селектор: `.debug-loading`

### Селектор: `.debug-hidden`

### Селектор: `.debug-error`

### Селектор: `.debug-warning`

### Селектор: `.debug-info`

### Селектор: `.chart-scroll-container`

### Селектор: `.chart-container`

### Селектор: `.chart-container.large-dataset`

### Селектор: `.chart-container.very-large-dataset`

### Селектор: `.chart-controls`

### Селектор: `.chart-filter`

### Селектор: `.chart-legend`

### Селектор: `.legend-item`

### Селектор: `.legend-color`

### Селектор: `.legend-label`

### Селектор: `.chart-scroll-container::-webkit-scrollbar`

### Селектор: `.chart-scroll-container::-webkit-scrollbar-track`

### Селектор: `.chart-scroll-container::-webkit-scrollbar-thumb`

### Селектор: `.chart-scroll-container::-webkit-scrollbar-thumb:hover`

### Селектор: `.chart-container`

### Селектор: `#accountChart`

### Селектор: `.chart-controls`

### Селектор: `.chart-filter`

### Селектор: `.chart-legend`

### Селектор: `.legend-item`

### Селектор: `.legend-color`

### Селектор: `.legend-item.balance .legend-color`

### Селектор: `.legend-item.equity .legend-color`

### Селектор: `.legend-item.history .legend-color`

### Селектор: `.chart-loading`

### Селектор: `.hidden`

### Селектор: `.status-indicator.disconnected`

### Селектор: `.custom-tooltip`

### Селектор: `.custom-tooltip:hover::after`

### Селектор: `.custom-tooltip:hover::before`

### Селектор: `.progress-bar-container`

### Селектор: `.progress-bar`

### Селектор: `.bulk-update-notice`

### Селектор: `.bulk-update-notice .button`

### Селектор: `.updating-row`

### Селектор: `.status-indicator.updating`

### Селектор: `.status-indicator .dashicons.spin`

### Селектор: `.bulk-update-notice`

### Селектор: `.bulk-update-notice .button`

### Селектор: `.status-indicator`

### Селектор: `.status-indicator.connected`

### Селектор: `.status-indicator.disconnected`

### Селектор: `.highlight-new`

### Селектор: `.highlight-delete`

### Селектор: `.account-info-wrapper`

### Селектор: `.change-percent`

### Селектор: `.change-percent.positive`

### Селектор: `.change-percent.negative`

### Селектор: `.account-section`

### Селектор: `.account-section h2`

### Селектор: `.actions .button`

### Селектор: `.actions .button .dashicons`

### Селектор: `.history-filters`

### Селектор: `.history-filter`

### Селектор: `#history_table_wrapper.loading`

### Селектор: `#history_table_wrapper.loading:after`

### Селектор: `.dashicons.spin`

### Селектор: `#update_status`

### Селектор: `.order-buy`

### Селектор: `.order-sell`

### Селектор: `.profit-positive`

### Селектор: `.profit-negative`

### Селектор: `.widefat td`

### Селектор: `.status-connected`

### Селектор: `.status-disconnected`

### Селектор: `.error-details`

---

## Файл: PLUGIN/contests/admin/js/account-chart.js

### Объект: `var AccountChart = {`

### Объект: `var xAxisTickSettings = {`

### Объект: `var options = {`

### Метод: `log`

### Метод: `formatDate`

### Функция: `padZero`

### Метод: `getDateOfWeek`

### Метод: `init`

### Метод: `initEvents`

### Метод: `loadChartData`

### Метод: `success`

### Метод: `error`

### Метод: `renderChart`

### Метод: `callback`

### Метод: `label`

### Метод: `callback`

### Метод: `updateLegend`

---

## Файл: PLUGIN/contests/admin/js/admin.js

### Объект: `var data = {`

### Объект: `var data = {`

### Функция: `initStatusTooltips`

### Метод: `success`

### Функция: `formatTimeAgo`

### Метод: `success`

### Метод: `error`

### Метод: `complete`

### Метод: `success`

### Метод: `error`

### Метод: `complete`

### Функция: `loadAccountHistory`

### Метод: `success`

### Метод: `error`

### Функция: `initServerUpdateQueue`

### Метод: `success`

### Метод: `error`

### Функция: `checkUpdateStatus`

### Метод: `success`

### Метод: `error`

### Функция: `updateStatusDisplay`

### Метод: `success`

### Метод: `error`

### Метод: `complete`

### Функция: `initPrizesInterface`

### Функция: `addPrizeRow`

### Функция: `updatePlaceNumbers`

### Функция: `updatePrizesData`

---

## Файл: PLUGIN/contests/admin/views/history-table.php

---

## Файл: PLUGIN/contests/frontend/css/frontend.css

### Селектор: `.loading-spinner`

### Селектор: `.progress-dots:after`

### Селектор: `.form-message.info.loading`

### Селектор: `.form-message.info.loading`

### Селектор: `.form-message.info.loading:before`

### Селектор: `.progress-indicator`

### Селектор: `.progress-dots`

### Селектор: `.progress-dots:after`

### Селектор: `.wait-time`

### Селектор: `.form-message`

### Селектор: `.form-message.success`

### Селектор: `.form-message.error`

### Селектор: `.form-message.info`

### Селектор: `.form-submit.loading`

### Селектор: `.form-group select`

### Селектор: `.form-group select:focus`

### Селектор: `.form-group select:hover`

### Селектор: `.form-group select option`

### Селектор: `.form-group select:disabled`

### Селектор: `.contests-stats-container`

### Селектор: `.prize-place-badge`

### Селектор: `.prize-place-badge.place-1`

### Селектор: `.prize-place-badge.place-2`

### Селектор: `.prize-place-badge.place-3`

### Селектор: `.prize-place-badge:not(.place-1):not(.place-2):not(.place-3)`

### Селектор: `.prize-description`

### Селектор: `.prize-amount`

### Селектор: `.contests-layout`

### Селектор: `.contests-main-content`

### Селектор: `.contests-sidebar`

### Селектор: `.sidebar-title`

### Селектор: `.stats-item`

### Селектор: `.stats-label`

### Селектор: `.stats-value`

### Селектор: `.stats-value.highlight`

### Селектор: `.stats-value.prize`

### Селектор: `.stats-description`

### Селектор: `.top-leaders`

### Селектор: `.leader-item`

### Селектор: `.leader-rank`

### Селектор: `.leader-rank.top-1`

### Селектор: `.leader-rank.top-2`

### Селектор: `.leader-rank.top-3`

### Селектор: `.leader-info`

### Селектор: `.leader-name`

### Селектор: `.leader-contest`

### Селектор: `.leader-profit`

### Селектор: `.leader-profit.positive`

### Селектор: `.leader-profit.negative`

### Селектор: `.contests-grid`

### Селектор: `.contest-card-link`

### Селектор: `.contest-card-new`

### Селектор: `.contest-card-new:hover`

### Селектор: `.contest-status-badge-new`

### Селектор: `.contest-status-badge-new.active`

### Селектор: `.contest-status-badge-new.upcoming`

### Селектор: `.contest-status-badge-new.completed`

### Селектор: `.contest-title-new`

### Селектор: `.contest-data-block`

### Селектор: `.contest-data-item`

### Селектор: `.contest-data-label`

### Селектор: `.contest-data-value`

### Селектор: `.contest-data-value.prize-value`

### Селектор: `.contest-sponsor`

### Селектор: `.sponsor-logo`

### Селектор: `.sponsor-text`

### Селектор: `.sponsor-text strong`

### Селектор: `.contests-pagination`

### Селектор: `.contests-pagination .page-numbers`

### Селектор: `.contests-pagination .page-numbers:hover`

### Селектор: `.contests-pagination .page-numbers.current`

### Селектор: `.contests-pagination .next`

### Селектор: `.no-contests-found`

### Селектор: `.no-contests-found p`

### Селектор: `.animated-counter`

### Селектор: `.account-chart-container`

### Селектор: `.account-chart-scroll-container`

### Селектор: `.leaders-chart-container`

### Селектор: `.leaders-chart-scroll-container`

### Селектор: `.account-edit-form`

### Селектор: `.account-edit-form h3`

### Селектор: `.account-edit-form .form-group`

### Селектор: `.account-edit-form label`

### Селектор: `.account-edit-form input[type="password"]`

### Селектор: `.account-edit-form .field-hint`

### Селектор: `.account-edit-form .form-actions`

### Селектор: `.account-edit-form .form-cancel`

### Селектор: `.account-edit-form .form-submit`

### Селектор: `.account-edit-form .form-cancel`

### Селектор: `.account-edit-form .form-submit:hover`

### Селектор: `.account-edit-form .form-cancel:hover`

### Селектор: `.account-edit-form .form-message`

### Селектор: `.account-edit-form .form-message.success`

### Селектор: `.account-edit-form .form-message.error`

### Селектор: `.account-edit-form .form-message.info`

### Селектор: `.account-action-button.delete`

### Селектор: `.account-action-button.delete:hover`

### Селектор: `.delete-status`

### Селектор: `.delete-status.error`

### Селектор: `.delete-status.success`

### Селектор: `.contest-leaders-chart`

### Селектор: `.contest-leaders-chart h2`

### Селектор: `.chart-controls`

### Селектор: `.chart-filter`

### Селектор: `.chart-filter label`

### Селектор: `#leaders_chart_period`

### Селектор: `#leaders_chart_period:hover`

### Селектор: `#leaders_chart_period:focus`

### Селектор: `.account-single-container`

### Селектор: `.contests-archive-header`

### Селектор: `.contests-archive-title`

### Селектор: `.contests-grid`

### Селектор: `.contest-card`

### Селектор: `.contest-card:hover`

### Селектор: `.contest-card.active`

### Селектор: `.contest-card.upcoming`

### Селектор: `.contest-card.completed`

### Селектор: `.contest-card-header`

### Селектор: `.contest-thumbnail`

### Селектор: `.contest-thumbnail img`

### Селектор: `.contest-card-content`

### Селектор: `.contest-card-footer`

### Селектор: `.contest-details-button`

### Селектор: `.contest-details-button:hover`

### Селектор: `.contest-header`

### Селектор: `.contest-title`

### Селектор: `.contest-title a`

### Селектор: `.contest-title a:hover`

### Селектор: `.contest-meta`

### Селектор: `.contest-meta > div`

### Селектор: `.contest-participants-label`

### Селектор: `.contest-excerpt`

### Селектор: `.contest-status`

### Селектор: `.contest-status.active`

### Селектор: `.contest-status.upcoming`

### Селектор: `.contest-status.finished`

### Селектор: `.contest-details`

### Селектор: `.contest-main-content`

### Селектор: `.contest-featured-image`

### Селектор: `.contest-image`

### Селектор: `.contest-description`

### Селектор: `.contest-participants h2`

### Селектор: `.contest-short-description`

### Селектор: `.contest-sidebar`

### Селектор: `.contest-sidebar-section`

### Селектор: `.contest-sidebar-title`

### Селектор: `.contest-info-item`

### Селектор: `.contest-info-label`

### Селектор: `.contest-info-value`

### Селектор: `.contest-info-value.active`

### Селектор: `.contest-info-value.upcoming`

### Селектор: `.contest-info-value.completed`

### Селектор: `.contest-info-item a`

### Селектор: `.contest-info-item a:hover`

### Селектор: `.prize-amount`

### Селектор: `.contest-registration-button`

### Селектор: `.contest-registration-button:hover`

### Селектор: `.contest-entry-requirements`

### Селектор: `.contest-share-buttons`

### Селектор: `.share-button`

### Селектор: `.share-button.facebook`

### Селектор: `.share-button.twitter`

### Селектор: `.share-button.telegram`

### Селектор: `.share-button:hover`

### Селектор: `.contest-participants`

### Селектор: `.participants-search`

### Селектор: `#search-participant`

### Селектор: `.participants-table-container`

### Селектор: `.participants-table`

### Селектор: `.participants-table th`

### Селектор: `.participants-table td`

### Селектор: `.participants-table tr:hover`

### Селектор: `.participants-table th.sortable`

### Селектор: `.participants-table th.sortable:after`

### Селектор: `.participants-table th.sortable.asc:after`

### Селектор: `.participants-table th.sortable.desc:after`

### Селектор: `.status-indicator`

### Селектор: `.status-connected`

### Селектор: `.status-disconnected`

### Селектор: `.update-time`

### Селектор: `.update-time.recent`

### Селектор: `.update-time.moderate`

### Селектор: `.update-time.stale`

### Селектор: `.contests-list-wrapper`

### Селектор: `.contests-header`

### Селектор: `.contests-title`

### Селектор: `.contests-count`

### Селектор: `.contests-table`

### Селектор: `.contests-table td`

### Селектор: `.contests-table th`

### Селектор: `.contest-registration-form`

### Селектор: `#contest-account-form .form-group`

### Селектор: `#contest-account-form label`

### Селектор: `#contest-account-form input[type="password"]`

### Селектор: `.field-hint`

### Селектор: `.form-actions`

### Селектор: `.form-submit`

### Селектор: `.form-cancel`

### Селектор: `.form-submit:hover`

### Селектор: `.form-cancel:hover`

### Селектор: `.form-message`

### Селектор: `.form-message.success`

### Селектор: `.form-message.error`

### Селектор: `.form-message.info`

### Селектор: `.registration-notes`

### Селектор: `.account-registration-form h3`

### Селектор: `.contest-registration-form h3`

### Селектор: `.chart-container`

### Селектор: `.chart-container.large-dataset`

### Селектор: `.chart-container.very-large-dataset`

### Селектор: `.chart-scroll-container`

### Селектор: `.chart-scroll-container::-webkit-scrollbar`

### Селектор: `.chart-scroll-container::-webkit-scrollbar-track`

### Селектор: `.chart-scroll-container::-webkit-scrollbar-thumb`

### Селектор: `.chart-scroll-container::-webkit-scrollbar-thumb:hover`

### Селектор: `.chart-legend-below`

### Селектор: `.chart-legend-below .legend-item`

### Селектор: `.chart-legend-below .legend-item:hover`

### Селектор: `.chart-legend-below .legend-color`

### Селектор: `.chart-legend-below .legend-label`

### Селектор: `.chart-legend-below .legend-item.legend-hidden`

### Селектор: `.chart-legend`

### Селектор: `.legend-item`

### Селектор: `.legend-color`

### Селектор: `.legend-label`

### Селектор: `.legend-value`

### Селектор: `.chart-controls`

### Селектор: `.chart-period-control`

### Селектор: `#chart-loading`

### Селектор: `.chart-period-control label`

### Селектор: `.chart-period-control select`

### Селектор: `.chart-period-control select:focus`

### Селектор: `.hidden`

### Селектор: `.account-header`

### Селектор: `.account-title`

### Селектор: `.account-meta`

### Селектор: `.account-status`

### Селектор: `.account-status.connected`

### Селектор: `.account-status.disconnected`

### Селектор: `.error-tooltip`

### Селектор: `.account-details`

### Селектор: `.account-financial-data`

### Селектор: `.financial-grid`

### Селектор: `.financial-item`

### Селектор: `.financial-label`

### Селектор: `.financial-value`

### Селектор: `.financial-value.profit-positive`

### Селектор: `.financial-value.profit-negative`

### Селектор: `.account-section`

### Селектор: `.account-order-history h2`

### Селектор: `.orders-table-container`

### Селектор: `.orders-table`

### Селектор: `.orders-table th`

### Селектор: `.orders-table td`

### Селектор: `.orders-table tr:hover`

### Селектор: `.pagination`

### Селектор: `.pagination select`

### Селектор: `.account-sidebar-section`

### Селектор: `.account-sidebar-section h3`

### Селектор: `.account-info-item`

### Селектор: `.account-info-label`

### Селектор: `.account-info-value`

### Селектор: `.account-action-button`

### Селектор: `.account-action-button:hover`

### Селектор: `.account-action-button.refresh`

### Селектор: `.account-action-button.refresh:hover`

### Селектор: `.refresh-status`

### Селектор: `.refresh-status.success`

### Селектор: `.refresh-status.error`

### Селектор: `.no-participants`

### Селектор: `.order-buy`

### Селектор: `.order-sell`

### Селектор: `.current-user-account`

### Селектор: `.current-user-account.highlighted`

### Селектор: `.notice-message`

### Селектор: `.error-message`

### Селектор: `.notice-message`

### Селектор: `.loading:before`

### Медиа-запрос: `@media (max-width: 768px) {`

### Медиа-запрос: `@media (max-width: 640px) {`

### Медиа-запрос: `@media (max-width: 1024px) {`

### Медиа-запрос: `@media (min-width: 1200px) {`

### Медиа-запрос: `@media (max-width: 768px) {`

### Медиа-запрос: `@media (max-width: 768px) {`

### Медиа-запрос: `@media (max-width: 768px) {`

### Медиа-запрос: `@media (max-width: 768px) {`

---

## Файл: PLUGIN/contests/frontend/js/frontend.js

### Метод: `success`

### Метод: `error`

### Функция: `animateCounters`

### Метод: `step`

### Метод: `complete`

### Функция: `updateTimeCounters`

### Функция: `updateContestData`

### Метод: `success`

---

## Файл: PLUGIN/contests/frontend/templates/contests-list.php

---

## Файл: PLUGIN/contests/ft-trader-contest.php

### Описание файла:
* * Активация плагина
* * Деактивация плагина
* * Регистрация типа записи "Конкурсы трейдеров"
* * Подключение скриптов и стилей для админки
* * Добавление метабоксов
* * CALLBACK ДЛЯ МЕТАПОЛЯ "Основная информация"
* * CALLBACK ДЛЯ МЕТАПОЛЯ "Настройки конкурса"
* * CALLBACK ДЛЯ МЕТАПОЛЯ "Условия конкурса"
* * CALLBACK ДЛЯ МЕТАПОЛЯ "Призовые места"
* * СОХРАНЕНИЕ МЕТАДАННЫХ
* * Добавляет CSS для горизонтальной прокрутки к таблице счетов
* * Добавляет подсказку о загрузке изображения конкурса
* * Подключение скриптов и стилей для фронтенда

### Функция: `function fttradingapi_activate() {`

### Функция: `function fttradingapi_deactivate() {`

### Функция: `function fttradingapi_register_contests_post_type() {`

### Функция: `function fttradingapi_enqueue_admin_scripts($hook) {`

### Функция: `function fttradingapi_add_contest_metaboxes() {`

### Функция: `function fttradingapi_contest_main_data_callback($post) {`

### Функция: `function fttradingapi_contest_settings_callback($post) {`

### Функция: `function fttradingapi_contest_conditions_callback($post) {`

### Функция: `function fttradingapi_contest_prizes_callback($post) {`

### Функция: `function fttradingapi_save_contest_data($post_id) {`

### Функция: `function handle_delete_account() {`

### Функция: `function fttradingapi_add_table_scroll_css() {`

### Функция: `function fttradingapi_add_contest_image_notice() {`

### Функция: `function fttradingapi_enqueue_frontend_scripts() {`

### add_action: `init', 'fttradingapi_register_contests_post_type`
```php
add_action('init', 'fttradingapi_register_contests_post_type');
```

### add_action: `admin_enqueue_scripts', 'fttradingapi_enqueue_admin_scripts`
```php
add_action('admin_enqueue_scripts', 'fttradingapi_enqueue_admin_scripts');
```

### add_action: `add_meta_boxes', 'fttradingapi_add_contest_metaboxes`
```php
add_action('add_meta_boxes', 'fttradingapi_add_contest_metaboxes');
```

### add_action: `save_post', 'fttradingapi_save_contest_data`
```php
add_action('save_post', 'fttradingapi_save_contest_data');
```

### add_action: `wp_ajax_fttradingapi_delete_account', 'handle_delete_account`
```php
add_action('wp_ajax_fttradingapi_delete_account', 'handle_delete_account');
```

### add_action: `admin_head', 'fttradingapi_add_table_scroll_css`
```php
add_action('admin_head', 'fttradingapi_add_table_scroll_css');
```

### add_action: `admin_notices', 'fttradingapi_add_contest_image_notice`
```php
add_action('admin_notices', 'fttradingapi_add_contest_image_notice');
```

### add_action: `wp_enqueue_scripts', 'fttradingapi_enqueue_frontend_scripts`
```php
add_action('wp_enqueue_scripts', 'fttradingapi_enqueue_frontend_scripts');
```

---

## Файл: PLUGIN/contests/includes/admin-metaboxes.php

### Функция: `function fttradingapi_add_account_metabox() {`

### Функция: `function fttradingapi_contest_account_callback($post) {`

### add_action: `add_meta_boxes', 'fttradingapi_add_account_metabox`
```php
add_action('add_meta_boxes', 'fttradingapi_add_account_metabox');
```

---

## Файл: PLUGIN/contests/includes/class-account-ajax-handlers.php

### Описание файла:
* * Класс для AJAX-обработчиков, связанных со счетами
* * Конструктор класса
* * AJAX-обработчик для получения данных графика лидеров
* * AJAX-обработчик для получения данных графика

### Класс: `class Account_AJAX_Handlers {`
```php
class Account_AJAX_Handlers {
```

#### Метод: `public function __construct() {` (public function __construct() {)

#### Метод: `public function get_leaders_chart_data() {` (public function get_leaders_chart_data() {)

#### Метод: `public function get_account_chart_data() {` (public function get_account_chart_data() {)

### add_action: `wp_ajax_get_account_chart_data', [$this, 'get_account_chart_data`
```php
add_action('wp_ajax_get_account_chart_data', [$this, 'get_account_chart_data']);
```

### add_action: `wp_ajax_nopriv_get_account_chart_data', [$this, 'get_account_chart_data`
```php
add_action('wp_ajax_nopriv_get_account_chart_data', [$this, 'get_account_chart_data']);
```

### add_action: `wp_ajax_get_leaders_chart_data', [$this, 'get_leaders_chart_data`
```php
add_action('wp_ajax_get_leaders_chart_data', [$this, 'get_leaders_chart_data']);
```

### add_action: `wp_ajax_nopriv_get_leaders_chart_data', [$this, 'get_leaders_chart_data`
```php
add_action('wp_ajax_nopriv_get_leaders_chart_data', [$this, 'get_leaders_chart_data']);
```

---

## Файл: PLUGIN/contests/includes/class-account-chart-data.php

### Описание файла:
* * Класс для работы с данными графика счета
* * Получает агрегированные данные для графика баланса и equity
* * Получает начальную дату для выбранного периода
* * Возвращает формат даты и интервал агрегации для заданного периода
* * Получает данные счета
* * Получает историю сделок счета
* * Восстанавливает историю баланса из истории сделок
* * Метод для форматирования данных без агрегации
* * Возвращает формат даты для заданного интервала
* * Возвращает PHP строку интервала для strtotime
* * Получает данные графика для топ-N лидеров конкурса

### Класс: `class Account_Chart_Data {`
```php
class Account_Chart_Data {
```

#### Метод: `public function get_chart_data($account_id, $period = 'week') {` (public function get_chart_data($account_id, $period = 'week') {)

#### Метод: `private function get_period_start_date($period) {` (private function get_period_start_date($period) {)

#### Метод: `private function get_interval_for_period($period) {` (private function get_interval_for_period($period) {)

#### Метод: `private function get_account_data($account_id) {` (private function get_account_data($account_id) {)

#### Метод: `private function get_account_order_history($account_id, $start_date) {` (private function get_account_order_history($account_id, $start_date) {)

#### Метод: `private function aggregate_data($balance_history, $interval = null, $max_intervals = null) {` (private function aggregate_data($balance_history, $interval = null, $max_intervals = null) {)

#### Метод: `private function get_date_format_for_interval($interval) {` (private function get_date_format_for_interval($interval) {)

#### Метод: `private function get_php_interval($interval) {` (private function get_php_interval($interval) {)

---

## Файл: PLUGIN/contests/includes/class-account-history.php

### Описание файла:
* * Проверяет процентное изменение для финансовых полей
* * Сравнивает значения обычных полей с учетом типов данных
* * Вычисляет процент изменения
* * Получает историю изменений для счета
* * Очищает всю историю изменений для указанного счета

### Класс: `class Account_History {`
```php
class Account_History {
```

#### Метод: `private function check_percent_change($field_name, $old_value, $new_value) {` (private function check_percent_change($field_name, $old_value, $new_value) {)

#### Метод: `private function is_value_changed($old_value, $new_value) {` (private function is_value_changed($old_value, $new_value) {)

#### Метод: `private function calculate_percent_change($old_value, $new_value) {` (private function calculate_percent_change($old_value, $new_value) {)

#### Метод: `public function track_changes($account_id, $old_data, $new_data) {` (public function track_changes($account_id, $old_data, $new_data) {)

#### Метод: `public function format_field_value($field_name, $value, $row) {` (public function format_field_value($field_name, $value, $row) {)

#### Метод: `public function get_account_history($account_id, $limit = 50) {` (public function get_account_history($account_id, $limit = 50) {)

---

## Файл: PLUGIN/contests/includes/class-account-updater.php

### Описание файла:
* * Класс для управления процессом обновления счетов на сервере
* * Инициализирует очередь обновления счетов
* * Обрабатывает порцию счетов из очереди
* * Завершает процесс обновления очереди
* * Получает текущий статус обновления
* * Запускает автоматическое обновление счетов

### Класс: `class Account_Updater {`
```php
class Account_Updater {
```

#### Метод: `public static function init_queue($account_ids, $is_auto_update = false) {` (public static function init_queue($account_ids, $is_auto_update = false) {)

#### Метод: `public static function process_batch() {` (public static function process_batch() {)

#### Метод: `public static function complete_queue() {` (public static function complete_queue() {)

#### Метод: `public static function get_status() {` (public static function get_status() {)

#### Метод: `public static function run_auto_update() {` (public static function run_auto_update() {)

### add_action: `process_accounts_update_batch', ['Account_Updater', 'process_batch`
```php
add_action('process_accounts_update_batch', ['Account_Updater', 'process_batch']);
```

### add_action: `contest_accounts_auto_update', ['Account_Updater', 'run_auto_update`
```php
add_action('contest_accounts_auto_update', ['Account_Updater', 'run_auto_update']);
```

---

## Файл: PLUGIN/contests/includes/class-accounts.php

---

## Файл: PLUGIN/contests/includes/class-api-handler.php

### Описание файла:
* * Универсальная функция для работы со счетами
* * AJAX-обработчик для создания очереди обновления счетов
* * AJAX-обработчик для получения статуса обновления
* * AJAX-обработчик для очистки истории изменений счета

### Функция: `function process_trading_account($account_data, $account_id = null, $contest_id = null)`

### Функция: `function fttradingapi_register_account()`

### Функция: `function fttradingapi_edit_account()`

### Функция: `function fttradingapi_ajax_update_account_data()`

### Функция: `function fttradingapi_load_account_history()`

### Функция: `function fttradingapi_create_update_queue()`
*Описание:*
* * AJAX-обработчик для создания очереди обновления счетов
* */

### Функция: `function fttradingapi_get_update_status()`
*Описание:*
* * AJAX-обработчик для получения статуса обновления
* */

### Функция: `function fttradingapi_clear_account_history()`
*Описание:*
* * AJAX-обработчик для очистки истории изменений счета
* */

### add_action: `wp_ajax_fttradingapi_register_account', 'fttradingapi_register_account`
```php
add_action('wp_ajax_fttradingapi_register_account', 'fttradingapi_register_account');
```

### add_action: `wp_ajax_fttradingapi_edit_account', 'fttradingapi_edit_account`
```php
add_action('wp_ajax_fttradingapi_edit_account', 'fttradingapi_edit_account');
```

### add_action: `wp_ajax_fttradingapi_update_account_data', 'fttradingapi_ajax_update_account_data`
```php
add_action('wp_ajax_fttradingapi_update_account_data', 'fttradingapi_ajax_update_account_data');
```

### add_action: `wp_ajax_load_account_history', 'fttradingapi_load_account_history`
```php
add_action('wp_ajax_load_account_history', 'fttradingapi_load_account_history');
```

### add_action: `wp_ajax_fttradingapi_create_update_queue', 'fttradingapi_create_update_queue`
```php
add_action('wp_ajax_fttradingapi_create_update_queue', 'fttradingapi_create_update_queue');
```

### add_action: `wp_ajax_fttradingapi_get_update_status', 'fttradingapi_get_update_status`
```php
add_action('wp_ajax_fttradingapi_get_update_status', 'fttradingapi_get_update_status');
```

### add_action: `wp_ajax_clear_account_history', 'fttradingapi_clear_account_history`
```php
add_action('wp_ajax_clear_account_history', 'fttradingapi_clear_account_history');
```

---

## Файл: PLUGIN/contests/includes/class-cron-manager.php

### Описание файла:
* * Класс для управления задачами WP Cron
* * Интервал запуска автоматического обновления (в секундах)
* * Инициализация менеджера Cron
* * Добавляет кастомный интервал для WP Cron
* * Активация расписания при активации плагина
* * Удаление расписания при деактивации плагина
* * Проверяет и при необходимости восстанавливает расписание
* * Запускает задачу обновления счетов вручную

### Класс: `class Contest_Cron_Manager {`
```php
class Contest_Cron_Manager {
```

#### Метод: `public static function init() {` (public static function init() {)

#### Метод: `public static function add_cron_interval($schedules) {` (public static function add_cron_interval($schedules) {)

#### Метод: `public static function activate() {` (public static function activate() {)

#### Метод: `public static function deactivate() {` (public static function deactivate() {)

#### Метод: `public static function ensure_scheduled_events() {` (public static function ensure_scheduled_events() {)

#### Метод: `public static function run_now() {` (public static function run_now() {)

### add_filter: `cron_schedules', [self::class, 'add_cron_interval`
```php
add_filter('cron_schedules', [self::class, 'add_cron_interval']);
```

### add_action: `admin_init', [self::class, 'ensure_scheduled_events`
```php
add_action('admin_init', [self::class, 'ensure_scheduled_events']);
```

---

## Файл: PLUGIN/contests/includes/class-installer.php

### Класс: `class FTTrader_Installer {`
```php
class FTTrader_Installer {
```

#### Метод: `public static function create_tables() {` (public static function create_tables() {)

---

## Файл: PLUGIN/contests/includes/class-orders.php

### Класс: `class Account_Orders {`
```php
class Account_Orders {
```

#### Метод: `public function update_orders($account_id, $orders_data) {` (public function update_orders($account_id, $orders_data) {)

#### Метод: `public function get_account_orders($account_id) {` (public function get_account_orders($account_id) {)

---

## Файл: PLUGIN/contests/includes/class-settings-page.php

---

## Файл: PLUGIN/contests/includes/front-templates.php

### Описание файла:
* * Класс для работы с шаблонами фронтенд-части
* * Инициализация класса
* * AJAX-обработчик для получения данных графика лидеров
* * Регистрация и подключение стилей и скриптов
* * Подключение кастомных шаблонов
* * Добавление классов к body для стилизации
* * Шорткод для формы регистрации счета

### Класс: `class FT_Contest_Templates {`
```php
class FT_Contest_Templates {
```

#### Метод: `public static function init() {` (public static function init() {)

#### Метод: `public static function get_leaders_chart_data() {` (public static function get_leaders_chart_data() {)

#### Метод: `public static function register_assets() {` (public static function register_assets() {)

#### Метод: `public static function template_include($template) {` (public static function template_include($template) {)

#### Метод: `public static function add_body_classes($classes) {` (public static function add_body_classes($classes) {)

#### Метод: `public static function registration_form_shortcode($atts) {` (public static function registration_form_shortcode($atts) {)

### add_filter: `template_include', [self::class, 'template_include`
```php
add_filter('template_include', [self::class, 'template_include']);
```

### add_filter: `body_class', [self::class, 'add_body_classes`
```php
add_filter('body_class', [self::class, 'add_body_classes']);
```

### add_action: `wp_enqueue_scripts', [self::class, 'register_assets`
```php
add_action('wp_enqueue_scripts', [self::class, 'register_assets']);
```

### add_action: `wp_ajax_get_leaders_chart_data', [self::class, 'get_leaders_chart_data`
```php
add_action('wp_ajax_get_leaders_chart_data', [self::class, 'get_leaders_chart_data']);
```

### add_action: `wp_ajax_nopriv_get_leaders_chart_data', [self::class, 'get_leaders_chart_data`
```php
add_action('wp_ajax_nopriv_get_leaders_chart_data', [self::class, 'get_leaders_chart_data']);
```

---

## Файл: PLUGIN/contests/public/class-contest-ajax.php

### Описание файла:
* * AJAX обработчики для публичной части плагина
* * Класс для обработки AJAX запросов с фронтенда
* * Инициализация AJAX обработчиков
* * AJAX-обработчик для загрузки формы регистрации счета
* * Обновление данных счета
* * Обновление данных счета
* * Обработчик для неавторизованных пользователей
* * Регистрация счета в конкурсе
* * Обработчик для неавторизованных пользователей
* * Получение данных для графика счета
* * Получение IP-адреса клиента
* * Получение информации о стране по IP адресу
* * AJAX-обработчик для обновления данных конкурсов

### Класс: `class Contest_Public_Ajax {`
```php
class Contest_Public_Ajax {
```

#### Метод: `public function init() {` (public function init() {)

#### Метод: `public function update_contest_account_unauthorized() {` (public function update_contest_account_unauthorized() {)

#### Метод: `public function register_contest_account() {` (public function register_contest_account() {)

#### Метод: `public function register_contest_account_unauthorized() {` (public function register_contest_account_unauthorized() {)

#### Метод: `public function get_account_chart_data() {` (public function get_account_chart_data() {)

#### Метод: `private function get_client_ip() {` (private function get_client_ip() {)

#### Метод: `private function get_country_by_ip($ip) {` (private function get_country_by_ip($ip) {)

#### Метод: `public function update_contests_data() {` (public function update_contests_data() {)

### add_action: `wp_ajax_register_contest_account', array($this, 'register_contest_account`
```php
add_action('wp_ajax_register_contest_account', array($this, 'register_contest_account'));
```

### add_action: `wp_ajax_nopriv_register_contest_account', array($this, 'register_contest_account_unauthorized`
```php
add_action('wp_ajax_nopriv_register_contest_account', array($this, 'register_contest_account_unauthorized'));
```

### add_action: `wp_ajax_update_contest_account_data', array($this, 'update_contest_account_data`
```php
add_action('wp_ajax_update_contest_account_data', array($this, 'update_contest_account_data'));
```

### add_action: `wp_ajax_nopriv_update_contest_account_data', array($this, 'register_contest_account_unauthorized`
```php
add_action('wp_ajax_nopriv_update_contest_account_data', array($this, 'register_contest_account_unauthorized'));
```

### add_action: `wp_ajax_get_account_chart_data', array($this, 'get_account_chart_data`
```php
add_action('wp_ajax_get_account_chart_data', array($this, 'get_account_chart_data'));
```

### add_action: `wp_ajax_nopriv_get_account_chart_data', array($this, 'get_account_chart_data`
```php
add_action('wp_ajax_nopriv_get_account_chart_data', array($this, 'get_account_chart_data'));
```

### add_action: `wp_ajax_update_contests_data', array($this, 'update_contests_data`
```php
add_action('wp_ajax_update_contests_data', array($this, 'update_contests_data'));
```

### add_action: `wp_ajax_nopriv_update_contests_data', array($this, 'update_contests_data`
```php
add_action('wp_ajax_nopriv_update_contests_data', array($this, 'update_contests_data'));
```

### add_action: `wp_ajax_load_registration_form', array($this, 'load_registration_form`
```php
add_action('wp_ajax_load_registration_form', array($this, 'load_registration_form'));
```

### add_action: `wp_ajax_nopriv_load_registration_form', array($this, 'load_registration_form`
```php
add_action('wp_ajax_nopriv_load_registration_form', array($this, 'load_registration_form'));
```

---

## Файл: PLUGIN/contests/public/class-contest-public.php

---

## Файл: PLUGIN/contests/public/js/contest-scripts.js

### Объект: `var LeadersChart = {`

### Объект: `var options = {`

### Метод: `success`

### Метод: `error`

### Функция: `showFormMessage`

### Метод: `init`

### Метод: `initEvents`

### Метод: `loadChartData`

### Метод: `success`

### Метод: `error`

### Метод: `renderChart`

### Метод: `label`

### Метод: `callback`

### Метод: `callback`

### Метод: `updateLegend`

---

## Файл: PLUGIN/contests/templates/archive-contests.php

### Описание файла:
* * Шаблон архивной страницы конкурсов трейдеров

---

## Файл: PLUGIN/contests/templates/parts/registration-form.php

### Описание файла:
* * Шаблон формы регистрации/редактирования счета в конкурсе

---

## Файл: PLUGIN/contests/templates/single-account.php

### Описание файла:
* * Шаблон для отображения информации о счете участника конкурса
* * Обработчик нажатия на кнопку удаления счета
* * Обработчик нажатия на кнопку обновления данных счета
* * Инициализация подсказок (tooltips) для элементов с ошибками
* * Обработка пагинации в истории сделок
* * Подсветка строк таблицы при наведении
* * Автоматическое обновление времени "обновлено X минут назад"

---

## Файл: PLUGIN/contests/templates/single-contest.php

### Описание файла:
* * Шаблон для отображения отдельного конкурса трейдеров

### Функция: `function get_contest_field($key, $data, $default = '') {`

---

## Файл: PLUGIN/contests/test-ajax.php

---

# Статистика
Всего файлов: 0
Всего функций/методов/классов/селекторов: 0
Разбито на 1 частей
