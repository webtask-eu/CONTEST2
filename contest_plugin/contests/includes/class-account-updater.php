<?php
/**
 * –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç–æ–≤ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
 */
class Account_Updater
{
    // –ö–ª—é—á–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≤ –æ–ø—Ü–∏—è—Ö WordPress
    const QUEUE_OPTION_PREFIX = 'contest_accounts_update_queue_';
    const STATUS_OPTION_PREFIX = 'contest_accounts_update_status_';
    const AUTO_UPDATE_LAST_RUN = 'contest_accounts_auto_update_last_run';
    const BATCH_SIZE = 2; // –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥–ª—è –æ–¥–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ - —É–º–µ–Ω—å—à–µ–Ω–æ –¥–æ 2, –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è–º–∏ API —Å–µ—Ä–≤–µ—Ä–∞ V2023.11.21

    /**
     * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—á–µ—Ä–µ–¥—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç–æ–≤
     *
     * @param array $account_ids –ú–∞—Å—Å–∏–≤ ID —Å—á–µ—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     * @param bool $is_auto_update –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, —á—Ç–æ —ç—Ç–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
     * @param int|null $contest_id ID –∫–æ–Ω–∫—É—Ä—Å–∞ (–µ—Å–ª–∏ –ø—Ä–∏–º–µ–Ω–∏–º–æ)
     * @return array –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏
     */
    public static function init_queue($account_ids, $is_auto_update = false, $contest_id = null)
    {
        global $wpdb;

        // –ü–æ–¥–∫–ª—é—á–∞–µ–º API-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–∏ process_trading_account
        $api_handler_file = plugin_dir_path(__FILE__) . 'class-api-handler.php';
        if (file_exists($api_handler_file)) {
            require_once $api_handler_file;
        }

        // –ï—Å–ª–∏ contest_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –µ–≥–æ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ —Å—á–µ—Ç–∞
        if (empty($contest_id) && !empty($account_ids)) {
            $first_account_id = reset($account_ids);
            $table_name = $wpdb->prefix . 'contest_members';
            $contest_id = $wpdb->get_var($wpdb->prepare(
                "SELECT contest_id FROM $table_name WHERE id = %d",
                $first_account_id
            ));
        }

        // –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è —ç—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏
        $letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
        $random_letters = '';
        for ($i = 0; $i < 4; $i++) {
            $random_letters .= $letters[rand(0, strlen($letters) - 1)];
        }
        $queue_id = 'q' . $random_letters;
        
        // –î–û–ë–ê–í–õ–ï–ù–û: –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–π ID –æ—á–µ—Ä–µ–¥–∏
        error_log("Created queue_id: " . $queue_id);
        
        // –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –∫–æ–Ω—Å–æ–ª—å —á–µ—Ä–µ–∑ wp_add_inline_script
        $script = "console.log('%cüÜî –°–æ–∑–¥–∞–Ω Queue ID: " . $queue_id . "', 'background:#3498db;color:white;padding:4px 8px;border-radius:3px;font-weight:bold;');";
        wp_add_inline_script('jquery', $script);
        
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º contest_id + queue_id –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –∫–ª—é—á–µ–π –æ–ø—Ü–∏–π
        // –≠—Ç–æ –ø–æ–∑–≤–æ–ª–∏—Ç –∑–∞–ø—É—Å–∫–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –≤–Ω—É—Ç—Ä–∏ –æ–¥–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞
        $contest_prefix = $contest_id ? $contest_id : 'global';
        $queue_option = self::QUEUE_OPTION_PREFIX . $contest_prefix . '_' . $queue_id;
        $status_option = self::STATUS_OPTION_PREFIX . $contest_prefix . '_' . $queue_id;

        if (empty($account_ids)) {
            return ['success' => false, 'message' => '–ù–µ –≤—ã–±—Ä–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Å—á–µ—Ç–∞', 'contest_id' => $contest_id, 'queue_id' => $queue_id];
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –æ —Å—Ç–∞—Ç—É—Å–µ
        $status = [
            'queue_id' => $queue_id,
            'contest_id' => $contest_id,
            'total' => count($account_ids),
            'completed' => 0,
            'success' => 0,
            'failed' => 0,
            'start_time' => time(),
            'last_update' => time(),
            'is_running' => true,
            'current_batch' => 0,
            'is_auto_update' => $is_auto_update,
            'accounts' => [], // –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∫–∞–∂–¥–æ–≥–æ —Å—á–µ—Ç–∞
            'status_option' => $status_option, // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –æ–ø—Ü–∏–∏, —á—Ç–æ–±—ã –ª–µ–≥–∫–æ –Ω–∞—Ö–æ–¥–∏—Ç—å —Å—Ç–∞—Ç—É—Å
            'queue_option' => $queue_option // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è –æ–ø—Ü–∏–∏ –æ—á–µ—Ä–µ–¥–∏
        ];

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å—Ç–∞—Ç—É—Å –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—á–µ—Ç–∞
        foreach ($account_ids as $id) {
            $status['accounts'][$id] = [
                'status' => 'pending', // pending, processing, success, failed
                'message' => '',
                'start_time' => 0,
                'end_time' => 0
            ];
        }

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –∏ –æ—á–µ—Ä–µ–¥—å
        update_option($status_option, $status);
        update_option($queue_option, $account_ids);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –Ω–æ–≤–æ–π –æ—á–µ—Ä–µ–¥–∏ –≤ —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π –¥–ª—è —ç—Ç–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞
        self::register_active_queue($contest_id, $queue_id, $status_option);

        // –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —á–µ—Ä–µ–∑ WP Cron —Å –ø–µ—Ä–µ–¥–∞—á–µ–π queue_id –∏ contest_id
        $scheduled = wp_schedule_single_event(time(), 'process_accounts_update_batch', [$contest_id, $queue_id]);
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π –∑–∞–ø—É—Å–∫ –∑–∞–¥–∞—á WP Cron —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        if ($scheduled) {
            // –£–¥–∞–ª–µ–Ω—ã –ø–æ–≤—Ç–æ—Ä–Ω—ã–π spawn_cron() –∏ –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ process_batch
        } else {
            // –ï—Å–ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é –ø–æ—Ä—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é
            // –û—Å—Ç–∞–≤–∏–º –ø—Ä—è–º–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            $direct_process_result = self::process_batch($contest_id, $queue_id);
        }

        return [
            'success' => true,
            'queue_id' => $queue_id,
            'contest_id' => $contest_id,
            'total' => count($account_ids),
            'message' => '–û—á–µ—Ä–µ–¥—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞'
        ];
    }

    /**
     * –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç –∞–∫—Ç–∏–≤–Ω—É—é –æ—á–µ—Ä–µ–¥—å –¥–ª—è –∫–æ–Ω–∫—É—Ä—Å–∞
     * 
     * @param int|null $contest_id ID –∫–æ–Ω–∫—É—Ä—Å–∞
     * @param string $queue_id ID –æ—á–µ—Ä–µ–¥–∏
     * @param string $status_option –ò–º—è –æ–ø—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
     */
    private static function register_active_queue($contest_id, $queue_id, $status_option) {
        $contest_key = 'contest_active_queues_' . ($contest_id ? $contest_id : 'global');
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π
        $active_queues = get_option($contest_key, []);
        
        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –æ—á–µ—Ä–µ–¥—å
        $active_queues[$queue_id] = [
            'status_option' => $status_option,
            'start_time' => time()
        ];
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
        update_option($contest_key, $active_queues);
    }

    /**
     * –£–¥–∞–ª—è–µ—Ç –æ—á–µ—Ä–µ–¥—å –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö
     * 
     * @param int|null $contest_id ID –∫–æ–Ω–∫—É—Ä—Å–∞
     * @param string $queue_id ID –æ—á–µ—Ä–µ–¥–∏
     */
    private static function unregister_active_queue($contest_id, $queue_id) {
        $contest_key = 'contest_active_queues_' . ($contest_id ? $contest_id : 'global');
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π
        $active_queues = get_option($contest_key, []);
        
        // –£–¥–∞–ª—è–µ–º –æ—á–µ—Ä–µ–¥—å
        if (isset($active_queues[$queue_id])) {
            unset($active_queues[$queue_id]);
            update_option($contest_key, $active_queues);
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ—Ä—Ü–∏—é —Å—á–µ—Ç–æ–≤ –∏–∑ –æ—á–µ—Ä–µ–¥–∏
     *
     * @param int|null $contest_id ID –∫–æ–Ω–∫—É—Ä—Å–∞
     * @param string|null $queue_id ID –æ—á–µ—Ä–µ–¥–∏
     * @return bool –£—Å–ø–µ—à–Ω–æ –ª–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞ –ø–æ—Ä—Ü–∏—è
     */
    public static function process_batch($contest_id = null, $queue_id = null)
    {
        global $wpdb;

        // –ï—Å–ª–∏ queue_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—É—é –æ—á–µ—Ä–µ–¥—å –¥–ª—è –∫–æ–Ω–∫—É—Ä—Å–∞ (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        if (empty($queue_id)) {
            $status_option = self::STATUS_OPTION_PREFIX . ($contest_id ? $contest_id : 'global');
            $queue_option = self::QUEUE_OPTION_PREFIX . ($contest_id ? $contest_id : 'global');
        } else {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π queue_id
            $contest_prefix = $contest_id ? $contest_id : 'global';
            $status_option = self::STATUS_OPTION_PREFIX . $contest_prefix . '_' . $queue_id;
            $queue_option = self::QUEUE_OPTION_PREFIX . $contest_prefix . '_' . $queue_id;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        $status = get_option($status_option, []);
        $queue = get_option($queue_option, []);

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—á–µ—Ä–µ–¥—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—â–µ–Ω
        if (empty($status) || empty($queue) || !$status['is_running']) {
            return false;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ contest_id –≤ —Å—Ç–∞—Ç—É—Å–µ, –µ—Å–ª–∏ –æ–Ω –±—ã–ª –ø–µ—Ä–µ–¥–∞–Ω
        if ($contest_id !== null && isset($status['contest_id']) && $status['contest_id'] !== $contest_id) {
            return false;
        }

        // –í—Å–µ–≥–¥–∞ –ø–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞ –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–ª–∞–≥–∏–Ω–∞, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Ç–∏–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        $auto_update_settings = get_option('fttrader_auto_update_settings', []);
        $batch_size = isset($auto_update_settings['fttrader_batch_size']) ?
            intval($auto_update_settings['fttrader_batch_size']) : self::BATCH_SIZE;

        // –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—á–µ—Ç–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–π –ø–æ—Ä—Ü–∏–∏
        $batch_start = $status['current_batch'] * $batch_size;
        $current_batch = array_slice($queue, $batch_start, $batch_size);

        // –ï—Å–ª–∏ –ø–æ—Ä—Ü–∏—è –ø—É—Å—Ç–∞, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
        if (empty($current_batch)) {
            self::complete_queue($contest_id, $queue_id, $status_option, $queue_option);
            return true;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ process_trading_account
        if (!function_exists('process_trading_account')) {
            // –ü—Ä–æ–≤–µ—Ä–∏–º, –∑–∞–≥—Ä—É–∂–µ–Ω –ª–∏ —Ñ–∞–π–ª —Å API-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
            $api_handler_file = plugin_dir_path(__FILE__) . 'class-api-handler.php';
            if (file_exists($api_handler_file)) {
                require_once $api_handler_file;
                
                if (!function_exists('process_trading_account')) {
                    // –û—Ç–º–µ—á–∞–µ–º —ç—Ç—É –ø–æ—Ä—Ü–∏—é –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω—É—é
                    foreach ($current_batch as $account_id) {
                        $status['accounts'][$account_id]['status'] = 'failed';
                        $status['accounts'][$account_id]['message'] = '–û—à–∏–±–∫–∞: –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å—á–µ—Ç–æ–≤ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞';
                        $status['completed']++;
                        $status['failed']++;
                    }
                    $status['current_batch']++;
                    $status['last_update'] = time();
                    update_option($status_option, $status);
                    
                    // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–æ—Ä—Ü–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ —Å—á–µ—Ç–∞
                    if ($status['completed'] < $status['total']) {
                        wp_schedule_single_event(time() + 5, 'process_accounts_update_batch', [$contest_id, $queue_id]);
                    } else {
                        self::complete_queue($contest_id, $queue_id, $status_option, $queue_option);
                    }
                    
                    return false;
                }
            } else {
                // –û—Ç–º–µ—á–∞–µ–º —ç—Ç—É –ø–æ—Ä—Ü–∏—é –∫–∞–∫ –ø—Ä–æ–±–ª–µ–º–Ω—É—é
                foreach ($current_batch as $account_id) {
                    $status['accounts'][$account_id]['status'] = 'failed';
                    $status['accounts'][$account_id]['message'] = '–û—à–∏–±–∫–∞: API –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω';
                    $status['completed']++;
                    $status['failed']++;
                }
                $status['current_batch']++;
                $status['last_update'] = time();
                update_option($status_option, $status);
                
                return false;
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç–∞ –≤ –ø–æ—Ä—Ü–∏–∏
        foreach ($current_batch as $account_id) {
            // –ü–æ–º–µ—á–∞–µ–º —Å—á–µ—Ç –∫–∞–∫ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–π
            $status['accounts'][$account_id]['status'] = 'processing';
            $status['accounts'][$account_id]['start_time'] = time();
            update_option($status_option, $status);

            try {
                // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç–∞ —Å –ø–µ—Ä–µ–¥–∞—á–µ–π queue_batch_id
                if (!empty($queue_id)) {
                    $queue_batch_id = $queue_id;
                } else {
                    // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π queue_batch_id –¥–ª—è –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
                    $letters = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
                    $random_letters = '';
                    for ($i = 0; $i < 4; $i++) {
                        $random_letters .= $letters[rand(0, strlen($letters) - 1)];
                    }
                    $queue_batch_id = 'b' . $random_letters; // b –æ–∑–Ω–∞—á–∞–µ—Ç batch update
                }
                $result = process_trading_account([], $account_id, null, $queue_batch_id);

                // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏–∑ –±–∞–∑—ã
                $account_data = $wpdb->get_row($wpdb->prepare(
                    "SELECT connection_status, error_description, balance, equity, margin, leverage FROM {$wpdb->prefix}contest_members WHERE id = %d",
                    $account_id
                ), ARRAY_A);

                // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—á–µ—Ç–∞
                $status['accounts'][$account_id]['status'] = $result['success'] ? 'success' : 'failed';
                $status['accounts'][$account_id]['connection_status'] = $account_data['connection_status'] ?? 'disconnected';
                $status['accounts'][$account_id]['error_description'] = $account_data['error_description'] ?? '';
                $status['accounts'][$account_id]['message'] = $result['message'];
                $status['accounts'][$account_id]['end_time'] = time();

                // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                $status['completed']++;
                if ($result['success']) {
                    $status['success']++;
                } else {
                    $status['failed']++;
                }
            } catch (Exception $e) {
                // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∏—Å–∫–ª—é—á–µ–Ω–∏–µ
                $status['accounts'][$account_id]['status'] = 'failed';
                $status['accounts'][$account_id]['message'] = '–ò—Å–∫–ª—é—á–µ–Ω–∏–µ: ' . $e->getMessage();
                $status['accounts'][$account_id]['end_time'] = time();
                $status['completed']++;
                $status['failed']++;
            }

            $status['last_update'] = time();
            update_option($status_option, $status);
        }

        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –Ω–æ–º–µ—Ä –ø–æ—Ä—Ü–∏–∏
        $status['current_batch']++;
        update_option($status_option, $status);

        // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–æ—Ä—Ü–∏—é, –µ—Å–ª–∏ –µ—Å—Ç—å –µ—â–µ —Å—á–µ—Ç–∞
        if ($status['completed'] < $status['total']) {
            $scheduled = wp_schedule_single_event(time() + 5, 'process_accounts_update_batch', [$contest_id, $queue_id]);
            
            // –ï—Å–ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é –ø–æ—Ä—Ü–∏—é –Ω–µ–º–µ–¥–ª–µ–Ω–Ω–æ
            if (!$scheduled) {
                // –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –Ω–µ –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
                error_log(sprintf('WP-Cron scheduling failed for queue %s (contest %s). Remaining accounts will not be processed automatically.', $queue_id, $contest_id));
                // –í–æ–∑–º–æ–∂–Ω–æ, –ø–æ–º–µ—Ç–∏—Ç—å –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å—á–µ—Ç–∞ –∫–∞–∫ failed –∏–ª–∏ error_scheduling
                // ... –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø–æ–º–µ—Ç–∫–∏ —Å—á–µ—Ç–æ–≤, –µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
                // return self::process_batch($contest_id, $queue_id);
            } else {
                // –Ø–≤–Ω—ã–π –≤—ã–∑–æ–≤ spawn_cron –¥–ª—è –∑–∞–ø—É—Å–∫–∞ WP Cron
                spawn_cron();
            }
        } else {
            // –í—Å–µ —Å—á–µ—Ç–∞ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
            self::complete_queue($contest_id, $queue_id, $status_option, $queue_option);
        }
        
        return true;
    }

    /**
     * –ó–∞–≤–µ—Ä—à–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—á–µ—Ä–µ–¥–∏
     * 
     * @param int|null $contest_id ID –∫–æ–Ω–∫—É—Ä—Å–∞
     * @param string|null $queue_id ID –æ—á–µ—Ä–µ–¥–∏
     * @param string $status_option –ò–º—è –æ–ø—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
     * @param string $queue_option –ò–º—è –æ–ø—Ü–∏–∏ –æ—á–µ—Ä–µ–¥–∏
     */
    public static function complete_queue($contest_id = null, $queue_id = null, $status_option = '', $queue_option = '')
    {
        // –ï—Å–ª–∏ –æ–ø—Ü–∏–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –∏ queue_id –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        if (empty($status_option) || empty($queue_option)) {
            if (empty($queue_id)) {
                $queue_option = self::QUEUE_OPTION_PREFIX . ($contest_id ? $contest_id : 'global');
                $status_option = self::STATUS_OPTION_PREFIX . ($contest_id ? $contest_id : 'global');
            } else {
                $contest_prefix = $contest_id ? $contest_id : 'global';
                $status_option = self::STATUS_OPTION_PREFIX . $contest_prefix . '_' . $queue_id;
                $queue_option = self::QUEUE_OPTION_PREFIX . $contest_prefix . '_' . $queue_id;
            }
        }
        
        $status = get_option($status_option, []);

        if (!empty($status)) {
            $status['is_running'] = false;
            $status['end_time'] = time();
            update_option($status_option, $status);

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
            $update_history = get_option('contest_accounts_update_history', []);

            // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –¥–æ 50 –∑–∞–ø–∏—Å–µ–π
            if (count($update_history) >= 50) {
                $update_history = array_slice($update_history, -49);
            }

            // –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            $update_history[] = [
                'start_time' => $status['start_time'],
                'end_time' => $status['end_time'],
                'total' => $status['total'],
                'success' => $status['success'],
                'failed' => $status['failed'],
                'contest_id' => $contest_id,
                'queue_id' => $queue_id,
                'is_auto_update' => isset($status['is_auto_update']) ? $status['is_auto_update'] : false
            ];

            update_option('contest_accounts_update_history', $update_history);
            
            // –£–¥–∞–ª—è–µ–º –æ—á–µ—Ä–µ–¥—å –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            if (!empty($queue_id)) {
                self::unregister_active_queue($contest_id, $queue_id);
            }
        }

        // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å
        delete_option($queue_option);
    }

    /**
     * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     *
     * @param int|null $contest_id ID –∫–æ–Ω–∫—É—Ä—Å–∞
     * @param string|null $queue_id ID –æ—á–µ—Ä–µ–¥–∏ (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏)
     * @return array –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º —Å—Ç–∞—Ç—É—Å–µ
     */
    public static function get_status($contest_id = null, $queue_id = null)
    {
        // –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π queue_id, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–ª—å–∫–æ —ç—Ç–æ–π –æ—á–µ—Ä–µ–¥–∏
        if (!empty($queue_id)) {
            $contest_prefix = $contest_id ? $contest_id : 'global';
            $status_option = self::STATUS_OPTION_PREFIX . $contest_prefix . '_' . $queue_id;
            
            $status = get_option($status_option, []);
            
            if (empty($status)) {
                return [
                    'is_running' => false,
                    'message' => '–û—á–µ—Ä–µ–¥—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞',
                    'contest_id' => $contest_id,
                    'queue_id' => $queue_id
                ];
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏
            $timeout = 5 * 60; // 5 –º–∏–Ω—É—Ç —Ç–∞–π–º-–∞—É—Ç
            if ($status['is_running'] && (time() - $status['last_update']) > $timeout) {
                $status['is_running'] = false;
                $status['message'] = '–ü—Ä–æ—Ü–µ—Å—Å –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω –∏–∑-–∑–∞ —Ç–∞–π–º-–∞—É—Ç–∞';
                update_option($status_option, $status);
            }
            
            // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ contest_id –∏ queue_id –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç—Å—è –≤ –æ—Ç–≤–µ—Ç–µ
            if (!isset($status['contest_id'])) {
                $status['contest_id'] = $contest_id;
            }
            if (!isset($status['queue_id'])) {
                $status['queue_id'] = $queue_id;
            }
            
            return $status;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –æ—á–µ—Ä–µ–¥–∏ –¥–ª—è –∫–æ–Ω–∫—É—Ä—Å–∞
        $contest_key = 'contest_active_queues_' . ($contest_id ? $contest_id : 'global');
        $active_queues = get_option($contest_key, []);
        
        if (empty($active_queues)) {
            // –î–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç
            $old_status_option = self::STATUS_OPTION_PREFIX . ($contest_id ? $contest_id : 'global');
            $old_status = get_option($old_status_option, []);
            
            if (!empty($old_status) && isset($old_status['is_running']) && $old_status['is_running']) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç
                $timeout = 5 * 60; // 5 –º–∏–Ω—É—Ç —Ç–∞–π–º-–∞—É—Ç
                if ((time() - $old_status['last_update']) > $timeout) {
                    $old_status['is_running'] = false;
                    $old_status['message'] = '–ü—Ä–æ—Ü–µ—Å—Å –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω –∏–∑-–∑–∞ —Ç–∞–π–º-–∞—É—Ç–∞';
                    update_option($old_status_option, $old_status);
                }
                
                // –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ contest_id –≤—Å–µ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –æ—Ç–≤–µ—Ç–µ
                if (!isset($old_status['contest_id'])) {
                    $old_status['contest_id'] = $contest_id;
                }
                
                return $old_status;
            }
            
            return [
                'is_running' => false,
                'message' => '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
                'contest_id' => $contest_id,
                'queues' => []
            ];
        }
        
        // –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—á–µ—Ä–µ–¥—è—Ö
        $queues = [];
        $total_accounts = 0;
        $completed_accounts = 0;
        $any_running = false;
        
        foreach ($active_queues as $q_id => $queue_info) {
            $status_option = $queue_info['status_option'];
            $queue_status = get_option($status_option, []);
            
            if (empty($queue_status)) {
                // –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –æ—á–µ—Ä–µ–¥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω, —É–¥–∞–ª—è–µ–º –µ—ë –∏–∑ —Å–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö
                unset($active_queues[$q_id]);
                continue;
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –æ—á–µ—Ä–µ–¥–∏
            $timeout = 5 * 60; // 5 –º–∏–Ω—É—Ç —Ç–∞–π–º-–∞—É—Ç
            if ($queue_status['is_running'] && (time() - $queue_status['last_update']) > $timeout) {
                $queue_status['is_running'] = false;
                $queue_status['message'] = '–ü—Ä–æ—Ü–µ—Å—Å –±—ã–ª –ø—Ä–µ—Ä–≤–∞–Ω –∏–∑-–∑–∞ —Ç–∞–π–º-–∞—É—Ç–∞';
                update_option($status_option, $queue_status);
            }
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ queue_id
            $queue_status['queue_id'] = $q_id;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É–º–º–∞—Ä–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            if ($queue_status['is_running']) {
                $any_running = true;
            }
            
            $total_accounts += isset($queue_status['total']) ? $queue_status['total'] : 0;
            $completed_accounts += isset($queue_status['completed']) ? $queue_status['completed'] : 0;
            
            // –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫ –æ—á–µ—Ä–µ–¥–µ–π
            $queues[$q_id] = $queue_status;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π (–µ—Å–ª–∏ –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –æ—á–µ—Ä–µ–¥–∏ –±–µ–∑ —Å—Ç–∞—Ç—É—Å–∞)
        if (count($active_queues) !== count($queues)) {
            update_option($contest_key, $active_queues);
        }
        
        // –§–æ—Ä–º–∏—Ä—É–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
        $result = [
            'is_running' => $any_running,
            'message' => $any_running ? '–ü—Ä–æ—Ü–µ—Å—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è' : '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
            'contest_id' => $contest_id,
            'total' => $total_accounts,
            'completed' => $completed_accounts,
            'progress' => $total_accounts > 0 ? round(($completed_accounts / $total_accounts) * 100) : 0,
            'queues' => $queues,
            'queues_count' => count($queues)
        ];
        
        return $result;
    }

    /**
     * –ó–∞–ø—É—Å–∫–∞–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤
     */
    public static function run_auto_update()
    {
        global $wpdb;

        // –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        $last_run = get_option(self::AUTO_UPDATE_LAST_RUN, 0);
        $now = time();

        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        $settings = get_option('fttrader_auto_update_settings', []);
        $interval = isset($settings['fttrader_auto_update_interval']) ?
            intval($settings['fttrader_auto_update_interval']) : 60; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 60 –º–∏–Ω—É—Ç

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –≤—Ä–µ–º–µ–Ω–∏ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç—É –ø—Ä–æ–≤–µ—Ä–∫—É, –µ—Å–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Ñ–ª–∞–≥ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
        if (!isset($GLOBALS['force_auto_update_flag']) && ($now - $last_run) < ($interval * 60)) {
            return;
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞
        update_option(self::AUTO_UPDATE_LAST_RUN, $now);

        // –í—ã–±–∏—Ä–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω–∫—É—Ä—Å—ã –∏ –≥—Ä—É–ø–ø–∏—Ä—É–µ–º —Å—á–µ—Ç–∞ –ø–æ –∫–æ–Ω–∫—É—Ä—Å–∞–º
        $table_name = $wpdb->prefix . 'contest_members';
        
        // –ü–æ–ª—É—á–∞–µ–º ID –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤ (—Å–æ —Å—Ç–∞—Ç—É—Å–æ–º publish)
        $contest_posts = $wpdb->get_results(
            "SELECT ID FROM $wpdb->posts 
             WHERE post_type = 'trader_contests' 
             AND post_status = 'publish'"
        );

        if (empty($contest_posts)) {
            return;
        }

        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∫–æ–Ω–∫—É—Ä—Å–∞ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
        $active_contests = [];
        foreach ($contest_posts as $contest_post) {
            $contest_data = get_post_meta($contest_post->ID, '_fttradingapi_contest_data', true);
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Ä–∞—Å–ø–∞—Ä—Å–∏–ª–∏—Å—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –∏ –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –∫–æ–Ω–∫—É—Ä—Å
            if (!empty($contest_data) && is_array($contest_data) && 
                isset($contest_data['contest_status']) && $contest_data['contest_status'] === 'active') {
                $active_contests[] = $contest_post->ID;
            }
        }

        if (empty($active_contests)) {
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ñ–ª–∞–≥–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —á–µ—Ä–µ–∑ –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
        $is_forced_update = isset($GLOBALS['force_auto_update_flag']) && $GLOBALS['force_auto_update_flag'] === true;

        // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞ —Å–æ–∑–¥–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω—É—é –æ—á–µ—Ä–µ–¥—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        foreach ($active_contests as $contest_id) {
            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Å—á–µ—Ç–∞ –¥–∞–Ω–Ω–æ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–∞
            $contest_accounts = $wpdb->get_col($wpdb->prepare(
                "SELECT id FROM $table_name WHERE contest_id = %d AND connection_status != 'disqualified'",
                $contest_id
            ));

            // –¢–∞–∫–∂–µ –ø–æ–ª—É—á–∞–µ–º –¥–∏—Å–∫–≤–∞–ª–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å—á–µ—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ –æ–±–Ω–æ–≤–ª—è–ª–∏—Å—å –±–æ–ª–µ–µ —Å—É—Ç–æ–∫
            $stale_disqualified = $wpdb->get_col($wpdb->prepare(
                "SELECT id FROM $table_name WHERE contest_id = %d AND connection_status = 'disqualified' AND (last_update_time IS NULL OR last_update_time < %d)",
                $contest_id,
                $now - DAY_IN_SECONDS
            ));

            $all_accounts = array_merge($contest_accounts, $stale_disqualified);

            if (!empty($all_accounts)) {
                // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—á–µ—Ä–µ–¥—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å —è–≤–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–º —Ñ–ª–∞–≥–æ–º is_auto_update
                self::init_queue($all_accounts, true, $contest_id);
            }
        }
        
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
        if ($is_forced_update) {
            unset($GLOBALS['force_auto_update_flag']);
        }
    }

    /**
     * –û—á–∏—â–∞–µ—Ç –≤—Å–µ –∑–∞–≤–∏—Å—à–∏–µ –æ—á–µ—Ä–µ–¥–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
     * 
     * @return array –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ–± –æ—á–∏—â–µ–Ω–Ω—ã—Ö –æ—á–µ—Ä–µ–¥—è—Ö
     */
    public static function clear_all_queues()
    {
        global $wpdb;
        
        $result = [
            'success' => true,
            'cleared_queues' => [],
            'cleared_status_options' => [],
            'cleared_queue_options' => [],
            'cleared_lists' => [],
            'message' => '–í—Å–µ –∑–∞–≤–∏—Å—à–∏–µ –æ—á–µ—Ä–µ–¥–∏ –æ—á–∏—â–µ–Ω—ã'
        ];
        
        // 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –æ–ø—Ü–∏–∏, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å contest_active_queues_
        $active_queue_lists = $wpdb->get_results(
            "SELECT option_name, option_value FROM $wpdb->options 
             WHERE option_name LIKE 'contest_active_queues_%'"
        );
        
        if (!empty($active_queue_lists)) {
            foreach ($active_queue_lists as $option) {
                $active_queues = maybe_unserialize($option->option_value);
                
                if (!empty($active_queues) && is_array($active_queues)) {
                    // –î–ª—è –∫–∞–∂–¥–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π –æ—á–µ—Ä–µ–¥–∏ –ø–æ–ª—É—á–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –æ–ø—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏ –¥–∞–Ω–Ω—ã—Ö
                    foreach ($active_queues as $queue_id => $queue_info) {
                        // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –æ–ø—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –æ—á–µ—Ä–µ–¥–∏
                        if (isset($queue_info['status_option'])) {
                            $status_option = $queue_info['status_option'];
                            delete_option($status_option);
                            $result['cleared_status_options'][] = $status_option;
                            
                            // –í—ã—á–∏—Å–ª—è–µ–º –∏–º—è –æ–ø—Ü–∏–∏ —Å –¥–∞–Ω–Ω—ã–º–∏ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–º–µ–Ω–∏ –æ–ø—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–∞
                            // –û–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–º–µ–Ω–∞ STATUS –Ω–∞ QUEUE –≤ –∏–º–µ–Ω–∏ –æ–ø—Ü–∏–∏
                            $queue_option = str_replace(
                                self::STATUS_OPTION_PREFIX, 
                                self::QUEUE_OPTION_PREFIX, 
                                $status_option
                            );
                            delete_option($queue_option);
                            $result['cleared_queue_options'][] = $queue_option;
                            
                            $result['cleared_queues'][] = [
                                'queue_id' => $queue_id,
                                'status_option' => $status_option,
                                'queue_option' => $queue_option
                            ];
                        }
                    }
                    
                    // –û—á–∏—â–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π
                    delete_option($option->option_name);
                    $result['cleared_lists'][] = $option->option_name;
                }
            }
        } else {
            $result['message'] = '–ê–∫—Ç–∏–≤–Ω—ã–µ —Å–ø–∏—Å–∫–∏ –æ—á–µ—Ä–µ–¥–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã';
        }
        
        // 2. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –∏—â–µ–º –∏ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ/–ø–æ—Ç–µ—Ä—è–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏ –æ—á–µ—Ä–µ–¥–µ–π
        $status_options = $wpdb->get_col(
            "SELECT option_name FROM $wpdb->options 
             WHERE option_name LIKE '". self::STATUS_OPTION_PREFIX ."%'"
        );
        
        foreach ($status_options as $status_option) {
            if (!in_array($status_option, $result['cleared_status_options'])) {
                delete_option($status_option);
                $result['cleared_status_options'][] = $status_option;
                
                // –¢–∞–∫–∂–µ —É–¥–∞–ª—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –æ–ø—Ü–∏—é –æ—á–µ—Ä–µ–¥–∏
                $queue_option = str_replace(
                    self::STATUS_OPTION_PREFIX, 
                    self::QUEUE_OPTION_PREFIX, 
                    $status_option
                );
                delete_option($queue_option);
                $result['cleared_queue_options'][] = $queue_option;
            }
        }
        
        return $result;
    }

    /**
     * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç–æ–≤
     * 
     * @return bool –£—Å–ø–µ—à–Ω–æ –ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
     */
    public static function setup_auto_update_schedule()
    {
        // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        $settings = get_option('fttrader_auto_update_settings', []);
        $enabled = isset($settings['fttrader_auto_update_enabled']) ? $settings['fttrader_auto_update_enabled'] : false;
        
        // –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        $timestamp = wp_next_scheduled('contest_accounts_auto_update');
        if ($timestamp) {
            wp_unschedule_event($timestamp, 'contest_accounts_auto_update');
        }
        
        // –ï—Å–ª–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ, –≤—ã—Ö–æ–¥–∏–º
        if (!$enabled) {
            return false;
        }
        
        // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª
        $interval = isset($settings['fttrader_auto_update_interval']) ? 
            intval($settings['fttrader_auto_update_interval']) : 60; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 60 –º–∏–Ω—É—Ç
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º/—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
        if (!wp_get_schedule('contest_accounts_auto_update')) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –∏–ª–∏ –∫–∞—Å—Ç–æ–º–Ω—ã–π
            $schedule = 'hourly'; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            if ($interval == 60) {
                $schedule = 'hourly';
            } elseif ($interval == 1440) {
                $schedule = 'daily';
            } else {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –Ω–∞—à –∫–∞—Å—Ç–æ–º–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                if (!wp_get_schedules()['contest_auto_update']) {
                    // –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª
                    add_filter('cron_schedules', function($schedules) use ($interval) {
                        $schedules['contest_auto_update'] = [
                            'interval' => $interval * 60,
                            'display' => sprintf('–ö–∞–∂–¥—ã–µ %d –º–∏–Ω—É—Ç', $interval)
                        ];
                        return $schedules;
                    });
                }
                $schedule = 'contest_auto_update';
            }
            
            // –ü–ª–∞–Ω–∏—Ä—É–µ–º —Å–æ–±—ã—Ç–∏–µ
            $scheduled = wp_schedule_event(time(), $schedule, 'contest_accounts_auto_update');
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–ø—É—Å–∫–∞–µ–º WP Cron
            spawn_cron();
            
            return $scheduled !== false;
        }
        
        return true;
    }
}

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö—É–∫ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ—Ä—Ü–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
// –ß–∏—Å–ª–æ 10 - –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç, 2 - –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–µ—Ä–µ–¥–∞–≤–∞–µ–º—ã—Ö –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ (contest_id, queue_id)
add_action('process_accounts_update_batch', ['Account_Updater', 'process_batch'], 10, 2);

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö—É–∫ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
add_action('contest_accounts_auto_update', ['Account_Updater', 'run_auto_update']);

// –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö—É–∫ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
add_action('update_option_fttrader_auto_update_settings', function($old_value, $new_value) {
    // –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    Account_Updater::setup_auto_update_schedule();
}, 10, 2);

/**
 * AJAX –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –∑–∞–≤–∏—Å—à–∏—Ö –æ—á–µ—Ä–µ–¥–µ–π
 */
function fttradingapi_clear_all_queues() {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ nonce –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'ft_trader_nonce')) {
        wp_send_json_error(['message' => '–û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.']);
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!current_user_can('manage_options')) {
        wp_send_json_error(['message' => '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.']);
        return;
    }
    
    // –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –æ—á–µ—Ä–µ–¥–µ–π
    $result = Account_Updater::clear_all_queues();
    
    // –§–æ—Ä–º–∏—Ä—É–µ–º —á–µ–ª–æ–≤–µ–∫–æ—á–∏—Ç–∞–µ–º–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    $message = '–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. ';
    $message .= '–û—á–∏—â–µ–Ω–æ –æ—á–µ—Ä–µ–¥–µ–π: ' . count($result['cleared_queues']) . ', ';
    $message .= '—Å–ø–∏—Å–∫–æ–≤ –æ—á–µ—Ä–µ–¥–µ–π: ' . count($result['cleared_lists']) . ', ';
    $message .= '–æ–ø—Ü–∏–π —Å—Ç–∞—Ç—É—Å–æ–≤: ' . count($result['cleared_status_options']) . ', ';
    $message .= '–æ–ø—Ü–∏–π –¥–∞–Ω–Ω—ã—Ö: ' . count($result['cleared_queue_options']) . '.';
    
    wp_send_json_success([
        'message' => $message,
        'details' => $result
    ]);
}
add_action('wp_ajax_fttradingapi_clear_all_queues', 'fttradingapi_clear_all_queues');

/**
 * AJAX –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
 */
function fttradingapi_restore_auto_update_schedule() {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ nonce –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    if (!isset($_POST['nonce']) || !wp_verify_nonce($_POST['nonce'], 'ft_trader_nonce')) {
        wp_send_json_error(['message' => '–û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.']);
        return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (!current_user_can('manage_options')) {
        wp_send_json_error(['message' => '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.']);
        return;
    }
    
    // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    $result = Account_Updater::setup_auto_update_schedule();
    
    if ($result) {
        $next_run = wp_next_scheduled('contest_accounts_auto_update');
        $message = '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ. ';
        $message .= '–°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: ' . date('d.m.Y H:i:s', $next_run);
        
        wp_send_json_success([
            'message' => $message,
            'next_run' => $next_run,
            'next_run_formatted' => date('d.m.Y H:i:s', $next_run)
        ]);
    } else {
        wp_send_json_error([
            'message' => '–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.'
        ]);
    }
}
add_action('wp_ajax_fttradingapi_restore_auto_update_schedule', 'fttradingapi_restore_auto_update_schedule');
