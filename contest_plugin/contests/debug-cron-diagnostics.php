<?php
/**
 * –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏ cron
 * –ó–∞–ø—É—Å–∫: –¥–æ–±–∞–≤–∏—Ç—å ?page=debug-cron –≤ URL –∞–¥–º–∏–Ω–∫–∏
 */

// –ó–∞—â–∏—Ç–∞ –æ—Ç –ø—Ä—è–º–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞
if (!defined('ABSPATH')) {
    die('–ü—Ä—è–º–æ–π –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω');
}

// –ü–æ–¥–∫–ª—é—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª–∞—Å—Å—ã
require_once plugin_dir_path(__FILE__) . 'includes/class-account-updater.php';
require_once plugin_dir_path(__FILE__) . 'includes/class-cron-manager.php';

function debug_cron_auto_update() {
    echo "=== –î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´ –ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–Ø ===\n\n";
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    echo "1. –ù–ê–°–¢–†–û–ô–ö–ò –ê–í–¢–û–û–ë–ù–û–í–õ–ï–ù–ò–Ø:\n";
    $auto_settings = get_option('fttrader_auto_update_settings', []);
    echo "–ü–æ–ª–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: " . print_r($auto_settings, true) . "\n";
    
    $enabled = isset($auto_settings['fttrader_auto_update_enabled']) ? $auto_settings['fttrader_auto_update_enabled'] : false;
    $interval = isset($auto_settings['fttrader_auto_update_interval']) ? $auto_settings['fttrader_auto_update_interval'] : 60;
    $batch_size = isset($auto_settings['fttrader_batch_size']) ? $auto_settings['fttrader_batch_size'] : 2;
    $min_update = isset($auto_settings['fttrader_min_update_interval']) ? $auto_settings['fttrader_min_update_interval'] : 5;
    
    echo "- –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∫–ª—é—á–µ–Ω–æ: " . ($enabled ? '–î–ê' : '–ù–ï–¢') . "\n";
    echo "- –ò–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞–ø—É—Å–∫–∞: {$interval} –º–∏–Ω—É—Ç\n";
    echo "- –†–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞: {$batch_size} —Å—á–µ—Ç–æ–≤\n";
    echo "- –ú–∏–Ω. –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏: {$min_update} –º–∏–Ω—É—Ç\n\n";
    
    // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º WP Cron
    echo "2. –°–û–°–¢–û–Ø–ù–ò–ï WP CRON:\n";
    $wp_cron_disabled = defined('DISABLE_WP_CRON') && DISABLE_WP_CRON;
    echo "- DISABLE_WP_CRON: " . ($wp_cron_disabled ? 'TRUE (–≤–Ω–µ—à–Ω–∏–π cron)' : 'FALSE (–≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π cron)') . "\n";
    
    $cron_status = Contest_Cron_Manager::check_cron_status();
    echo "- –•—É–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω: " . ($cron_status['our_hook_scheduled'] ? '–î–ê' : '–ù–ï–¢') . "\n";
    echo "- –ò–Ω—Ç–µ—Ä–≤–∞–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω: " . ($cron_status['our_interval_registered'] ? '–î–ê' : '–ù–ï–¢') . "\n";
    
    if ($cron_status['next_scheduled']) {
        echo "- –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: " . date('d.m.Y H:i:s', $cron_status['next_scheduled']) . "\n";
    } else {
        echo "- –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: –ù–ï –ó–ê–ü–õ–ê–ù–ò–†–û–í–ê–ù\n";
    }
    
    $last_run = get_option('contest_create_queues_last_run', 0);
    if ($last_run) {
        echo "- –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫: " . date('d.m.Y H:i:s', $last_run) . "\n";
        echo "- –ü—Ä–æ—à–ª–æ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∑–∞–ø—É—Å–∫–∞: " . round((time() - $last_run) / 60) . " –º–∏–Ω—É—Ç\n";
    } else {
        echo "- –ü–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—É—Å–∫: –ù–ò–ö–û–ì–î–ê\n";
    }
    echo "\n";
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –æ—á–µ—Ä–µ–¥–∏
    echo "3. –ê–ö–¢–ò–í–ù–´–ï –û–ß–ï–†–ï–î–ò:\n";
    $queues_info = Account_Updater::get_all_active_queues();
    echo "- –í—Å–µ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–æ–≤ —Å –æ—á–µ—Ä–µ–¥—è–º–∏: " . $queues_info['contests'] . "\n";
    echo "- –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –æ—á–µ—Ä–µ–¥–µ–π: " . $queues_info['total_running'] . "\n\n";
    
    if (!empty($queues_info['queues'])) {
        foreach ($queues_info['queues'] as $contest_info) {
            echo "–ö–æ–Ω–∫—É—Ä—Å: {$contest_info['contest_title']} (ID: {$contest_info['contest_id']})\n";
            echo "- –û—á–µ—Ä–µ–¥–µ–π: {$contest_info['running_queues']}/{$contest_info['total_queues']}\n";
            
            foreach ($contest_info['queues'] as $queue) {
                echo "  - –û—á–µ—Ä–µ–¥—å {$queue['queue_id']}: ";
                echo "{$queue['completed']}/{$queue['total']} ";
                echo "(" . round(($queue['completed']/$queue['total'])*100) . "%) ";
                echo ($queue['is_running'] ? '–ê–ö–¢–ò–í–ù–ê' : '–û–°–¢–ê–ù–û–í–õ–ï–ù–ê');
                if (isset($queue['timeout']) && $queue['timeout']) {
                    echo ' [–¢–ê–ô–ú–ê–£–¢]';
                    if (isset($queue['timeout_reason'])) {
                        echo " - {$queue['timeout_reason']}";
                    }
                }
                echo "\n";
                echo "    –ù–∞—á–∞–ª–æ: " . date('d.m.Y H:i:s', $queue['start_time']);
                echo ", –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ: " . date('d.m.Y H:i:s', $queue['last_update']) . "\n";
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω–∏—Ü–∏–∞—Ç–æ—Ä–∞
                if (isset($queue['initiator'])) {
                    $initiator = $queue['initiator'];
                    echo "    –ò–Ω–∏—Ü–∏–∞—Ç–æ—Ä: " . ($initiator['type'] === 'auto' ? '–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ' : '–†—É—á–Ω–æ–µ');
                    if ($initiator['type'] === 'manual') {
                        echo " ({$initiator['user_display_name']})";
                    }
                    echo "\n";
                }
            }
            echo "\n";
        }
    }
    
    // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
    echo "4. –ó–ê–ü–õ–ê–ù–ò–†–û–í–ê–ù–ù–´–ï –°–û–ë–´–¢–ò–Ø:\n";
    $crons = _get_cron_array();
    $auto_update_events = [];
    
    if (!empty($crons)) {
        foreach ($crons as $timestamp => $hooks) {
            if (isset($hooks['contest_create_queues'])) {
                foreach ($hooks['contest_create_queues'] as $event) {
                    $auto_update_events[] = [
                        'timestamp' => $timestamp,
                        'time' => date('d.m.Y H:i:s', $timestamp),
                        'schedule' => $event['schedule'] ?? 'once',
                        'args' => $event['args'] ?? []
                    ];
                }
            }
        }
    }
    
    echo "- –°–æ–±—ã—Ç–∏–π contest_create_queues: " . count($auto_update_events) . "\n";
    if (count($auto_update_events) > 1) {
        echo "‚ö†Ô∏è  –û–ë–ù–ê–†–£–ñ–ï–ù–û –î–£–ë–õ–ò–†–û–í–ê–ù–ò–ï –°–û–ë–´–¢–ò–ô!\n";
    }
    
    foreach ($auto_update_events as $event) {
        echo "  - {$event['time']} (—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ: {$event['schedule']})\n";
    }
    echo "\n";
    
    // 5. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–Ω–∫—É—Ä—Å—ã
    echo "5. –ê–ö–¢–ò–í–ù–´–ï –ö–û–ù–ö–£–†–°–´:\n";
    $contests = get_posts([
        'post_type' => 'trader_contests',
        'post_status' => 'publish',
        'posts_per_page' => -1
    ]);
    
    $active_contests = [];
    foreach ($contests as $contest) {
        $contest_data = get_post_meta($contest->ID, '_fttradingapi_contest_data', true);
        if (!empty($contest_data) && is_array($contest_data) && 
            isset($contest_data['contest_status']) && $contest_data['contest_status'] === 'active') {
            $active_contests[] = $contest;
        }
    }
    
    echo "- –í—Å–µ–≥–æ –∫–æ–Ω–∫—É—Ä—Å–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º publish: " . count($contests) . "\n";
    echo "- –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–Ω–∫—É—Ä—Å–æ–≤ (–≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö): " . count($active_contests) . "\n";
    
    foreach ($active_contests as $contest) {
        echo "  - {$contest->post_title} (ID: {$contest->ID})\n";
        
        // –°—á–∏—Ç–∞–µ–º —Å—á–µ—Ç–∞ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ
        global $wpdb;
        $accounts_count = $wpdb->get_var($wpdb->prepare(
            "SELECT COUNT(*) FROM {$wpdb->prefix}contest_members WHERE contest_id = %d",
            $contest->ID
        ));
        echo "    –°—á–µ—Ç–æ–≤ –≤ –∫–æ–Ω–∫—É—Ä—Å–µ: {$accounts_count}\n";
    }
    echo "\n";
    
    // 6. –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º
    echo "6. –ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú:\n";
    
    if (!$enabled) {
        echo "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ê–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–∫–ª—é—á–µ–Ω–æ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö!\n";
    }
    
    if (count($auto_update_events) == 0) {
        echo "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: –ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!\n";
    } elseif (count($auto_update_events) > 1) {
        echo "‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–≤–æ–∑–º–æ–∂–Ω—ã –∫–æ–Ω—Ñ–ª–∏–∫—Ç—ã)\n";
    }
    
    if ($queues_info['total_running'] > 0) {
        $timeout_queues = 0;
        foreach ($queues_info['queues'] as $contest_info) {
            foreach ($contest_info['queues'] as $queue) {
                if (isset($queue['timeout']) && $queue['timeout']) {
                    $timeout_queues++;
                }
            }
        }
        
        if ($timeout_queues > 0) {
            echo "üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –ü–†–û–ë–õ–ï–ú–ê: {$timeout_queues} –æ—á–µ—Ä–µ–¥–µ–π –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Ç–∞–π–º–∞—É—Ç–æ–º!\n";
            echo "   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n";
            echo "   - API —Å–µ—Ä–≤–µ—Ä–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω\n";
            echo "   - –°–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π —Ç–∞–π–º-–∞—É—Ç (5 –º–∏–Ω—É—Ç)\n";
            echo "   - –ü—Ä–æ–±–ª–µ–º—ã —Å WP Cron\n";
            echo "   - –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —Ä–∞–∑–º–µ—Ä –ø–∞–∫–µ—Ç–∞\n";
        }
    }
    
    if ($wp_cron_disabled && !$cron_status['our_hook_scheduled']) {
        echo "‚ö†Ô∏è  –ü–†–û–ë–õ–ï–ú–ê: –í–Ω–µ—à–Ω–∏–π cron –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–æ —Å–æ–±—ã—Ç–∏—è –Ω–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã\n";
        echo "   –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤–Ω–µ—à–Ω–µ–≥–æ cron –Ω–∞ –≤—ã–∑–æ–≤ wp-cron.php\n";
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –≤ –ª–æ–≥–∞—Ö
    if (!empty($queues_info['queues'])) {
        echo "\n7. –ê–ù–ê–õ–ò–ó –ò–ù–¢–ï–†–í–ê–õ–û–í –°–û–ó–î–ê–ù–ò–Ø –û–ß–ï–†–ï–î–ï–ô:\n";
        $all_start_times = [];
        foreach ($queues_info['queues'] as $contest_info) {
            foreach ($contest_info['queues'] as $queue) {
                $all_start_times[] = $queue['start_time'];
            }
        }
        
        if (count($all_start_times) >= 2) {
            sort($all_start_times);
            for ($i = 1; $i < count($all_start_times); $i++) {
                $interval_minutes = ($all_start_times[$i] - $all_start_times[$i-1]) / 60;
                echo "–ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –æ—á–µ—Ä–µ–¥—è–º–∏: " . round($interval_minutes) . " –º–∏–Ω—É—Ç\n";
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º
            $expected_interval = $interval;
            $actual_intervals = [];
            for ($i = 1; $i < count($all_start_times); $i++) {
                $actual_intervals[] = ($all_start_times[$i] - $all_start_times[$i-1]) / 60;
            }
            $avg_interval = array_sum($actual_intervals) / count($actual_intervals);
            
            echo "–û–∂–∏–¥–∞–µ–º—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: {$expected_interval} –º–∏–Ω—É—Ç\n";
            echo "–°—Ä–µ–¥–Ω–∏–π —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª: " . round($avg_interval) . " –º–∏–Ω—É—Ç\n";
            
            if (abs($avg_interval - $expected_interval) > 10) {
                echo "üö® –ü–†–û–ë–õ–ï–ú–ê: –§–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º!\n";
            }
        }
    }
    
    echo "\n=== –ö–û–ù–ï–¶ –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò ===\n";
}

// –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã–∑–æ–≤–∞ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω–∫—É
if (is_admin() && isset($_GET['page']) && $_GET['page'] === 'debug-cron') {
    add_action('admin_init', function() {
        if (!current_user_can('manage_options')) {
            wp_die('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã.');
        }
        
        header('Content-Type: text/plain; charset=utf-8');
        debug_cron_auto_update();
        exit;
    });
} 